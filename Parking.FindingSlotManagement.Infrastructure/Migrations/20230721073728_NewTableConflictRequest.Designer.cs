// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Parking.FindingSlotManagement.Infrastructure.Persistences;

#nullable disable

namespace Parking.FindingSlotManagement.Infrastructure.Migrations
{
    [DbContext(typeof(ParkZDbContext))]
    [Migration("20230721073728_NewTableConflictRequest")]
    partial class NewTableConflictRequest
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.ApproveParking", b =>
                {
                    b.Property<int>("ApproveParkingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApproveParkingId"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteForAdmin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParkingId")
                        .HasColumnType("int");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApproveParkingId");

                    b.HasIndex("ParkingId");

                    b.HasIndex("StaffId");

                    b.ToTable("ApproveParkings");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Bill", b =>
                {
                    b.Property<int>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillId"), 1L, 1);

                    b.Property<int?>("BusinessId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("BillId");

                    b.HasIndex("BusinessId");

                    b.HasIndex("WalletId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"), 1L, 1);

                    b.Property<DateTime?>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateBook")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("GuestName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GuestPhone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("QRImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("money");

                    b.Property<decimal>("UnPaidMoney")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int?>("VehicleInforId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleInforID");

                    b.HasKey("BookingId");

                    b.HasIndex(new[] { "UserId" }, "IX_Booking_UserID");

                    b.HasIndex(new[] { "VehicleInforId" }, "IX_Booking_VehicleInforID");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.BookingDetails", b =>
                {
                    b.Property<int>("BookingDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingDetailsId"), 1L, 1);

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<int?>("TimeSlotId")
                        .HasColumnType("int");

                    b.HasKey("BookingDetailsId");

                    b.HasIndex("BookingId");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("BookingDetails");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.BusinessProfile", b =>
                {
                    b.Property<int>("BusinessProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusinessProfileId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BackIdentification")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BusinessLicense")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("FeeId")
                        .HasColumnType("int");

                    b.Property<string>("FrontIdentification")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("BusinessProfileId");

                    b.HasIndex("FeeId");

                    b.HasIndex(new[] { "UserId" }, "UQ__Business__1788CCAD877AB68C")
                        .IsUnique()
                        .HasFilter("([UserID] IS NOT NULL)");

                    b.ToTable("Business", (string)null);
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.ConflictRequest", b =>
                {
                    b.Property<int>("ConflictRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConflictRequestId"), 1L, 1);

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParkingId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConflictRequestId");

                    b.ToTable("ConflictRequests");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.FavoriteAddress", b =>
                {
                    b.Property<int>("FavoriteAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteAddressId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TagName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("FavoriteAddressId");

                    b.HasIndex(new[] { "UserId" }, "IX_FavoriteAddress_UserID");

                    b.ToTable("FavoriteAddress", (string)null);
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Fee", b =>
                {
                    b.Property<int>("FeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeeId"), 1L, 1);

                    b.Property<string>("BusinessType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("FeeId");

                    b.ToTable("Fees");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.FieldWorkParkingImg", b =>
                {
                    b.Property<int>("FieldWorkParkingImgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FieldWorkParkingImgId"), 1L, 1);

                    b.Property<int?>("ApproveParkingId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FieldWorkParkingImgId");

                    b.HasIndex("ApproveParkingId");

                    b.ToTable("FieldWorkParkingImgs");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Floor", b =>
                {
                    b.Property<int>("FloorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FloorId"), 1L, 1);

                    b.Property<string>("FloorName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ParkingId")
                        .HasColumnType("int")
                        .HasColumnName("ParkingID");

                    b.HasKey("FloorId");

                    b.HasIndex(new[] { "ParkingId" }, "IX_Floors_ParkingID");

                    b.ToTable("Floors");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Parking", b =>
                {
                    b.Property<int>("ParkingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParkingId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("BusinessId")
                        .HasColumnType("int")
                        .HasColumnName("BusinessId");

                    b.Property<int?>("CarSpot")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFull")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOvernight")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPrepayment")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(10,6)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(10,6)");

                    b.Property<int?>("MotoSpot")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float?>("Stars")
                        .HasColumnType("real");

                    b.Property<int?>("StarsCount")
                        .HasColumnType("int");

                    b.Property<float?>("TotalStars")
                        .HasColumnType("real");

                    b.HasKey("ParkingId");

                    b.HasIndex("BusinessId");

                    b.ToTable("Parking", (string)null);
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.ParkingHasPrice", b =>
                {
                    b.Property<int>("ParkingHasPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParkingHasPriceId"), 1L, 1);

                    b.Property<int?>("ParkingId")
                        .HasColumnType("int");

                    b.Property<int?>("ParkingPriceId")
                        .HasColumnType("int");

                    b.HasKey("ParkingHasPriceId");

                    b.HasIndex("ParkingId");

                    b.HasIndex("ParkingPriceId");

                    b.ToTable("ParkingHasPrice", (string)null);
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.ParkingPrice", b =>
                {
                    b.Property<int>("ParkingPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParkingPriceId"), 1L, 1);

                    b.Property<int?>("BusinessId")
                        .HasColumnType("int")
                        .HasColumnName("BusinessId");

                    b.Property<float?>("ExtraTimeStep")
                        .HasColumnType("real");

                    b.Property<bool?>("HasPenaltyPrice")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsExtrafee")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWholeDay")
                        .HasColumnType("bit");

                    b.Property<string>("ParkingPriceName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal?>("PenaltyPrice")
                        .HasColumnType("money");

                    b.Property<float?>("PenaltyPriceStepTime")
                        .HasColumnType("real");

                    b.Property<int?>("StartingTime")
                        .HasColumnType("int")
                        .HasColumnName("StartingTime");

                    b.Property<int?>("TrafficId")
                        .HasColumnType("int");

                    b.HasKey("ParkingPriceId");

                    b.HasIndex("BusinessId");

                    b.HasIndex("TrafficId");

                    b.ToTable("ParkingPrice", (string)null);
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.ParkingSlot", b =>
                {
                    b.Property<int>("ParkingSlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParkingSlotId"), 1L, 1);

                    b.Property<int?>("ColumnIndex")
                        .HasColumnType("int");

                    b.Property<int?>("FloorId")
                        .HasColumnType("int")
                        .HasColumnName("FloorID");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<int?>("RowIndex")
                        .HasColumnType("int");

                    b.Property<int?>("TrafficId")
                        .HasColumnType("int")
                        .HasColumnName("TrafficID");

                    b.HasKey("ParkingSlotId");

                    b.HasIndex(new[] { "FloorId" }, "IX_ParkingSlots_FloorID");

                    b.HasIndex(new[] { "TrafficId" }, "IX_ParkingSlots_TrafficID");

                    b.ToTable("ParkingSlots");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.ParkingSpotImage", b =>
                {
                    b.Property<int>("ParkingSpotImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParkingSpotImageId"), 1L, 1);

                    b.Property<string>("ImgPath")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ParkingId")
                        .HasColumnType("int")
                        .HasColumnName("ParkingID");

                    b.HasKey("ParkingSpotImageId");

                    b.HasIndex(new[] { "ParkingId" }, "IX_ParkingSpotImage_ParkingID");

                    b.ToTable("ParkingSpotImage", (string)null);
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.PayPal", b =>
                {
                    b.Property<int>("PayPalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayPalId"), 1L, 1);

                    b.Property<string>("ClientId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnName("ManagerID");

                    b.Property<string>("SecretKey")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("PayPalId");

                    b.HasIndex(new[] { "ManagerId" }, "IX_PayPal_ManagerID");

                    b.ToTable("PayPal", (string)null);
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            IsActive = true,
                            Name = "Manager"
                        },
                        new
                        {
                            RoleId = 2,
                            IsActive = true,
                            Name = "Keeper"
                        },
                        new
                        {
                            RoleId = 3,
                            IsActive = true,
                            Name = "Customer"
                        },
                        new
                        {
                            RoleId = 4,
                            IsActive = true,
                            Name = "Staff"
                        });
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.TimeLine", b =>
                {
                    b.Property<int>("TimeLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimeLineId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<decimal?>("ExtraFee")
                        .HasColumnType("money");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParkingPriceId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("TimeLineId");

                    b.HasIndex("ParkingPriceId");

                    b.ToTable("TimeLine", (string)null);
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.TimeSlot", b =>
                {
                    b.Property<int>("TimeSlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimeSlotId"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParkingSlotId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TimeSlotId");

                    b.HasIndex("ParkingSlotId");

                    b.ToTable("TimeSlot", (string)null);
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Traffic", b =>
                {
                    b.Property<int>("TrafficId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrafficId"), 1L, 1);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TrafficId");

                    b.ToTable("VehicleType", (string)null);

                    b.HasData(
                        new
                        {
                            TrafficId = 1,
                            IsActive = true,
                            Name = "Xe ô tô"
                        },
                        new
                        {
                            TrafficId = 2,
                            IsActive = true,
                            Name = "Xe máy"
                        });
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"), 1L, 1);

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("BookingId");

                    b.HasIndex("WalletId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Devicetoken")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("IdCardDate")
                        .HasColumnType("date");

                    b.Property<string>("IdCardIssuedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IdCardNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCensorship")
                        .HasColumnType("bit");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnName("ManagerID");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParkingId")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("varbinary(255)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasMaxLength(255)
                        .HasColumnType("varbinary(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.HasKey("UserId");

                    b.HasIndex("ParkingId");

                    b.HasIndex(new[] { "ManagerId" }, "IX_Users_ManagerID");

                    b.HasIndex(new[] { "RoleId" }, "IX_Users_RoleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.VehicleInfor", b =>
                {
                    b.Property<int>("VehicleInforId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleInforId"), 1L, 1);

                    b.Property<string>("Color")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)");

                    b.Property<string>("LicensePlate")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)");

                    b.Property<int?>("TrafficId")
                        .HasColumnType("int")
                        .HasColumnName("TrafficID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("VehicleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VehicleInforId");

                    b.HasIndex(new[] { "TrafficId" }, "IX_VehicleInfor_TrafficID");

                    b.HasIndex(new[] { "UserId" }, "IX_VehicleInfor_UserID");

                    b.ToTable("Vehicle", (string)null);
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.VnPay", b =>
                {
                    b.Property<int>("VnPayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VnPayId"), 1L, 1);

                    b.Property<string>("HashSecret")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TmnCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("VnPayId");

                    b.HasIndex(new[] { "UserId" }, "IX_userId_VnPay");

                    b.ToTable("VnPay", (string)null);
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletId"), 1L, 1);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Debt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("WalletId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Wallets");

                    b.HasData(
                        new
                        {
                            WalletId = 1,
                            Balance = 0m,
                            Debt = 0m
                        });
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.ApproveParking", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.Parking", "Parking")
                        .WithMany("ApproveParkings")
                        .HasForeignKey("ParkingId")
                        .HasConstraintName("FK_Parking_ApproveParkings");

                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.User", "User")
                        .WithMany("ApproveParkings")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_User_ApproveParkings");

                    b.Navigation("Parking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Bill", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.BusinessProfile", "businessProfile")
                        .WithMany("Bills")
                        .HasForeignKey("BusinessId")
                        .HasConstraintName("FK_businessPro_Bills");

                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.Wallet", "Wallet")
                        .WithMany("Bills")
                        .HasForeignKey("WalletId")
                        .HasConstraintName("FK_Wallet_Bills");

                    b.Navigation("Wallet");

                    b.Navigation("businessProfile");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Booking", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Booking__UserID__5070F446");

                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.VehicleInfor", "VehicleInfor")
                        .WithMany("Bookings")
                        .HasForeignKey("VehicleInforId")
                        .HasConstraintName("FK__Booking__Vehicle");

                    b.Navigation("User");

                    b.Navigation("VehicleInfor");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.BookingDetails", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.Booking", "Booking")
                        .WithMany("BookingDetails")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK__Booking__BookingDetails");

                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.TimeSlot", "TimeSlot")
                        .WithMany("BookingDetails")
                        .HasForeignKey("TimeSlotId")
                        .HasConstraintName("FK__TimeSlot__BookingDetails");

                    b.Navigation("Booking");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.BusinessProfile", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.Fee", "Fee")
                        .WithMany("BusinessProfiles")
                        .HasForeignKey("FeeId")
                        .HasConstraintName("FK_Fee_BusinessProfiles");

                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.User", "User")
                        .WithOne("BusinessProfile")
                        .HasForeignKey("Parking.FindingSlotManagement.Domain.Entities.BusinessProfile", "UserId")
                        .HasConstraintName("fk_IsManager");

                    b.Navigation("Fee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.FavoriteAddress", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.User", "User")
                        .WithMany("FavoriteAddresses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__FavoriteA__UserI__33D4B598");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.FieldWorkParkingImg", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.ApproveParking", "ApproveParking")
                        .WithMany("FieldWorkParkingImgs")
                        .HasForeignKey("ApproveParkingId")
                        .HasConstraintName("FK_ApprovePar_FieldWorkPas");

                    b.Navigation("ApproveParking");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Floor", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.Parking", "Parking")
                        .WithMany("Floors")
                        .HasForeignKey("ParkingId")
                        .HasConstraintName("FK__Floors__ParkingI__47DBAE45");

                    b.Navigation("Parking");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Parking", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.BusinessProfile", "BusinessProfile")
                        .WithMany("Parkings")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__BusiessPro__Parking");

                    b.Navigation("BusinessProfile");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.ParkingHasPrice", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.Parking", "Parking")
                        .WithMany("ParkingHasPrices")
                        .HasForeignKey("ParkingId")
                        .HasConstraintName("FK_ParkingHasPrice_Parking");

                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.ParkingPrice", "ParkingPrice")
                        .WithMany("ParkingHasPrices")
                        .HasForeignKey("ParkingPriceId")
                        .HasConstraintName("FK_ParkingHasPrice_ParkingPrice");

                    b.Navigation("Parking");

                    b.Navigation("ParkingPrice");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.ParkingPrice", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.BusinessProfile", "BusinessProfile")
                        .WithMany("ParkingPrices")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Business__ParkingPri");

                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.Traffic", "Traffic")
                        .WithMany("ParkingPrices")
                        .HasForeignKey("TrafficId")
                        .HasConstraintName("FK__VehicleTy_Parkingpri");

                    b.Navigation("BusinessProfile");

                    b.Navigation("Traffic");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.ParkingSlot", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.Floor", "Floor")
                        .WithMany("ParkingSlots")
                        .HasForeignKey("FloorId")
                        .HasConstraintName("FK__ParkingSl__Floor__5441852A");

                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.Traffic", "Traffic")
                        .WithMany("ParkingSlots")
                        .HasForeignKey("TrafficId")
                        .HasConstraintName("FK__ParkingSl__Traff");

                    b.Navigation("Floor");

                    b.Navigation("Traffic");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.ParkingSpotImage", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.Parking", "Parking")
                        .WithMany("ParkingSpotImages")
                        .HasForeignKey("ParkingId")
                        .HasConstraintName("FK__ParkingSp__Parki__3C69FB99");

                    b.Navigation("Parking");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.PayPal", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.User", "Manager")
                        .WithMany("PayPals")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK__PayPal__ManagerI__2D27B809");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.TimeLine", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.ParkingPrice", "ParkingPrice")
                        .WithMany("TimeLines")
                        .HasForeignKey("ParkingPriceId")
                        .HasConstraintName("FK_Timeline_ParkingPrice");

                    b.Navigation("ParkingPrice");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.TimeSlot", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.ParkingSlot", "Parkingslot")
                        .WithMany("TimeSlots")
                        .HasForeignKey("ParkingSlotId")
                        .HasConstraintName("FK_Parkingslot_BookedSlots");

                    b.Navigation("Parkingslot");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.Booking", "Booking")
                        .WithMany("Transactions")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK_Booking_BookingPayments");

                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .HasConstraintName("FK_Wallet_BookingPayments");

                    b.Navigation("Booking");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.User", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.User", "Manager")
                        .WithMany("InverseManager")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK__Users__ManagerID__267ABA7A");

                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.Parking", "Parking")
                        .WithMany("Users")
                        .HasForeignKey("ParkingId")
                        .HasConstraintName("FK__Parking__Users");

                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__Users__RoleID__276EDEB3");

                    b.Navigation("Manager");

                    b.Navigation("Parking");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.VehicleInfor", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.Traffic", "Traffic")
                        .WithMany("VehicleInfors")
                        .HasForeignKey("TrafficId")
                        .HasConstraintName("FK__VehicleIn__Traff");

                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.User", "User")
                        .WithMany("VehicleInfors")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__VehicleIn__UserI__4AB81AF0");

                    b.Navigation("Traffic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.VnPay", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.User", "User")
                        .WithMany("VnPays")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__VnPay__User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Wallet", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("Parking.FindingSlotManagement.Domain.Entities.Wallet", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.ApproveParking", b =>
                {
                    b.Navigation("FieldWorkParkingImgs");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Booking", b =>
                {
                    b.Navigation("BookingDetails");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.BusinessProfile", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("ParkingPrices");

                    b.Navigation("Parkings");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Fee", b =>
                {
                    b.Navigation("BusinessProfiles");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Floor", b =>
                {
                    b.Navigation("ParkingSlots");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Parking", b =>
                {
                    b.Navigation("ApproveParkings");

                    b.Navigation("Floors");

                    b.Navigation("ParkingHasPrices");

                    b.Navigation("ParkingSpotImages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.ParkingPrice", b =>
                {
                    b.Navigation("ParkingHasPrices");

                    b.Navigation("TimeLines");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.ParkingSlot", b =>
                {
                    b.Navigation("TimeSlots");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.TimeSlot", b =>
                {
                    b.Navigation("BookingDetails");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Traffic", b =>
                {
                    b.Navigation("ParkingPrices");

                    b.Navigation("ParkingSlots");

                    b.Navigation("VehicleInfors");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.User", b =>
                {
                    b.Navigation("ApproveParkings");

                    b.Navigation("Bookings");

                    b.Navigation("BusinessProfile");

                    b.Navigation("FavoriteAddresses");

                    b.Navigation("InverseManager");

                    b.Navigation("PayPals");

                    b.Navigation("VehicleInfors");

                    b.Navigation("VnPays");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.VehicleInfor", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Wallet", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
